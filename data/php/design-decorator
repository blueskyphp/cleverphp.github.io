装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。
这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能
优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。
例子：
interface eMailBody {
    public function loadBody();
}
 
class eMail implements eMailBody {
    public function loadBody() {
        echo "This is Main Email body.<br />";
    } 
}

//主装饰器
abstract class emailBodyDecorator implements eMailBody {
     
    protected $emailBody;
     
    public function __construct(eMailBody $emailBody) {
        $this->emailBody = $emailBody;
    }
     
    abstract public function loadBody();
     
} 
 
class christmasEmailBody extends emailBodyDecorator {
     
    public function loadBody() {
         
        echo 'This is Extra Content for Christmas<br />';
        $this->emailBody->loadBody();
         
    }
     
}
 
class newYearEmailBody extends emailBodyDecorator {
 
    public function loadBody() {
         
        echo 'This is Extra Content for New Year.<br />';
        $this->emailBody->loadBody();
         
    }
 
}

如果需要同时使用christmasEmailBody和newYearEmailBody，一个实现是使用traits，使用traits可以达到多重继承的目的，但是使用装饰器可以避免使用子类，比如这个：
$email = new eMail;
$chrx = new christmasEmailBody($email);
$newx = new newYearEmailBody($chrx);
$newx->loadBody();//此时就会额外的增加chr和newy的功能而不需改变主类也无需创建子类